CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR (40),
    last_name VARCHAR (40),
    birth_date DATE,
    sex VARCHAR (1),
    salary INT,
    super_id INT,
    branch_id INT
);

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR (20),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY (mgr_id) REFERENCES employee (emp_id) ON DELETE SET NULL
);

-- ON DELETE SET NULL
-- means if the employee is deleted, the mgr_id is set to NULL
-- DELETE FROM employee
-- WHERE emp_id = 102
-- SELECT * FROM branch , this would have all the branches but show NULL instead of 102
-- same thing will happen with super_id as they also had on delete set null


-- ON DELETE CASCADE (check branch_supplier table)
-- DELETE FROM branch
-- WHERE branch_id = 2;
-- SELECT * FROM branch_supplier
-- With this any row that had branch_id 2 will be deleted (opposed to being set to NULL)

-- Typically you can use set null when the key is not a primary key
-- If it were a primary key ON DELETE CASCADE must be used


ALTER TABLE employee
ADD FOREIGN KEY (super_id)
REFERENCES employee (emp_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY (branch_id)
REFERENCES branch (branch_id)
ON DELETE SET NULL;

CREATE TABLE client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR (40),
    branch_id INT,
    FOREIGN KEY (branch_id) REFERENCES branch (branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY (emp_id, client_id),
    FOREIGN KEY (emp_id) REFERENCES employee (emp_id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES client (client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
    branch_id INT,
    supplier_name VARCHAR (40),
    supply_type VARCHAR (40),
    PRIMARY KEY (branch_id, supplier_name),
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- corporate branch

INSERT INTO employee VALUES (100, 'David', 'Wallace', '1967-11-17', 'M', 250000, null,null);

INSERT INTO branch VALUES (1,'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES (101, 'Jan','Levinson', '1961-05-11', 'F', 110000, 100,1);

-- scranton branch

INSERT INTO employee VALUES (102,'Micheal','Scott', '1964-03-15','M', 75000,100,null);

INSERT INTO branch VALUES (2,'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES (103, 'Angela','Martin', '1971-06-25','F', 63000, 102,2);
INSERT INTO employee VALUES (104, 'Kelly','Kapoor', '1980-02-05','F', 55000, 102,2);
INSERT INTO employee VALUES (105, 'Stanley','Hudson', '1958-02-15','M', 69000, 102,2);

-- stamford branch

INSERT INTO employee VALUES (106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, null);

INSERT INTO branch VALUES (3, 'Stamford', 106, '1998-02-12');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES (107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES (108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER

INSERT INTO branch_supplier VALUES (2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES (2, 'Uni-ball', 'Writing Untensils');
INSERT INTO branch_supplier VALUES (3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES (2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES (3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES (3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES (3, 'Stamford Labels', 'Custom Forms');

-- CLIENT

INSERT INTO client VALUES (400,'Dunmore Highschool',2);
INSERT INTO client VALUES (401,'Lackawana Country',2);
INSERT INTO client VALUES (402,'FedEx',3);
INSERT INTO client VALUES (403,'John Daly Law, LLC',3);
INSERT INTO client VALUES (404,'Scranton Whitepages',2);
INSERT INTO client VALUES (405,'Times Newspaper',3);
INSERT INTO client VALUES (406,'FedEx',2);

-- WORKS WITH 

INSERT INTO works_with VALUES (105,400,55000);
INSERT INTO works_with VALUES (102,401,267000);
INSERT INTO works_with VALUES (108,402,22500);
INSERT INTO works_with VALUES (107,403,5000);
INSERT INTO works_with VALUES (108,403,12000);
INSERT INTO works_with VALUES (105,404,33000);
INSERT INTO works_with VALUES (107,405,26000);
INSERT INTO works_with VALUES (102,406,15000);
INSERT INTO works_with VALUES (105,406,130000);



-- TRIGGERS --

CREATE TABLE trigger_test (
    message VARCHAR (100)
);

DELIMETER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES ('added new employee');
    END $$
DELIMETER ;

INSERT INTO employee
VALUES (109,'Oscar', 'Martinez', '1969-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;
-- This will return a message 'added new employee'

DELIMETER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES (NEW.first_name);
    END $$
DELIMETER ;

-- When adding an employee and selecting * from the table
-- This should return the employees first name
-- We would also see the first message if the first trigger is up

DELIMETER $$
CREATE
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES ('added male employee');
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES ('added female employee');
        ELSE
            INSERT INTO trigger_test VALUES ('added other employee');
        END IF;
    END $$
DELIMETER ;

-- Same idea but using elseif conditions

DROP TRIGGER my_trigger;
-- drops trigger

